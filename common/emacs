(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)

;; Package management {{{
(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if itâ€™s not.

Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)

;; Assuming you wish to install "iedit" and "magit"
(ensure-package-installed 'color-theme-sanityinc-tomorrow
                          'evil
                          'evil-leader
                          'evil-surround
                          'fill-column-indicator
                          'haml-mode
                          'helm
                          'helm-ag
                          'helm-projectile
                          'hlinum
                          'magit
                          'neotree
                          'powerline
                          'powerline-evil
                          'projectile
                          'rspec-mode
                          'rubocop
                          'ruby-end
                          'scss-mode
                          'yaml-mode)
;; }}}

;; Colorscheme and font {{{
(load-theme 'sanityinc-tomorrow-night t)
(set-frame-font "Source Code Pro 10")
;; }}}

;; GUI elements {{{
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Powerline
(powerline-evil-vim-color-theme)
(display-time-mode t)

;; Column rule
(setq fci-rule-column 81)
(fci-mode t)

;; Show column number in status bar
(column-number-mode t)

;; Line numbers
(global-linum-mode t)
(hlinum-activate)

;; Neotree
(require 'neotree)
(add-hook 'neotree-mode-hook
  (lambda ()
    (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
    (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
;; }}}

;; Helm {{{
(require 'helm)
(helm-mode t)
;; }}}

;; Evil-mode {{{
(require 'evil-leader)
(global-evil-leader-mode 1)
(global-evil-surround-mode 1)
(evil-leader/set-leader ",")

(evil-leader/set-key
  "w" 'save-buffer
  "d" 'kill-this-buffer
  "gs" 'magit-status
  "t" 'helm-projectile
  "m" 'neotree-toggle
  ;; "ev" [open .emacs]
  ;; "rs" [run tests]
  "v" 'rubocop-check-current-file
  "b" 'switch-to-buffer
  "x" 'helm-M-x
  "a" 'helm-ag
)

(setq evil-want-C-u-scroll t) ;; Force Ctrl+U to scroll half screen up.
(setq evil-want-C-d-scroll t) ;; Force Ctrl+D to scroll half screen bottom.

(require 'evil)
(evil-mode t)
;; }}}

;; Overall settings {{{
(setq make-backup-files nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq inhibit-startup-message t)
(setq auto-save-default nil)
(setq-default fill-column 80)
;; }}}

;; Keybindings {{{
(global-set-key (kbd "M-x") 'helm-M-x)
;; }}}

;; Hooks {{{
(add-hook 'prog-mode-hook (lambda ()
                            (turn-on-auto-fill)
                            (fci-mode)
                            (set-fill-column 81)))
(add-hook 'text-mode-hook (lambda ()
                            (turn-on-auto-fill)
                            (fci-mode)
                            (set-fill-column 81)))
;; }}}

;; still need:
;; - git gutter
;; - softtab, hidden characters
;; - hard wrap for specific filetypes
;; - surround (evil-surround not good)
;; - ctags
;; - orgmode
;; - folds
;; - tabs
;; - snippets
;; - email (?)
;; - open split from helm-projectile ;; C-c o

;; Emacs auto-generated stuff {{{

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-term-color-vector
   [unspecified "#1d1f21" "#cc6666" "#b5bd68" "#f0c674" "#81a2be" "#b294bb" "#81a2be" "#c5c8c6"])
 '(custom-safe-themes
   (quote
    ("628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "40f6a7af0dfad67c0d4df2a1dd86175436d79fc69ea61614d668a635c2cd94ab" "75c0b1d2528f1bce72f53344939da57e290aa34bea79f3a1ee19d6808cb55149" "af214da6d2c72574ededfb50e7985f80ada42b327ed3bffc9b67740fb5e74e58" default)))
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(linum-format (quote "%4d ")))
 ;; start maximized

;; }}}

;; vim: foldmethod=marker foldmarker={{{,}}}
